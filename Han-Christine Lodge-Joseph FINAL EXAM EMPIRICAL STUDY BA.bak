;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-advanced-reader.ss" "lang")((modname |Han-Christine Lodge-Joseph FINAL EXAM EMPIRICAL STUDY BA|) (read-case-sensitive #t) (teachpacks ((lib "universe.rkt" "teachpack" "2htdp") (lib "image.rkt" "teachpack" "2htdp") (lib "abstraction.rkt" "teachpack" "2htdp") (lib "while.rkt" "installed-teachpacks") (lib "while.scrbl" "installed-teachpacks"))) (htdp-settings #(#t constructor repeating-decimal #t #t none #f ((lib "universe.rkt" "teachpack" "2htdp") (lib "image.rkt" "teachpack" "2htdp") (lib "abstraction.rkt" "teachpack" "2htdp") (lib "while.rkt" "installed-teachpacks") (lib "while.scrbl" "installed-teachpacks")) #f)))
(define QS-V0 (vector))
(define QS-V1 (vector 10 3 7 17 11))
(define QS-V2 (vector 31 46 60 22 74 22 27 60 20 44
                      23 85 86 67 12 75 80 77 62 37))
(define QS-V3 (build-vector 10 (λ (i) i)))
(define QS-V4 (build-vector 10 (λ (i) (sub1 (- 10 i)))))

(define HS-V0 (vector))
(define HS-V1 (vector 4 7 19 28 9))
(define HS-V2 (vector 6 17 48 29 7 10 4 28 19 7
                      8 19 2 3 5 27 46 38 19 10))
(define HS-V3 (build-vector 10 (λ (i) i)))
(define HS-V4 (build-vector 10 (λ (i) (sub1 (- 10 i)))))

(define IS-V0 (vector))
(define IS-V1 (vector 7 18 4 6 10))
(define IS-V2 (vector 8 7 16 2 19 10 3 18 2 10
                      2 48 59 47 28 10 29 5 38 10))
(define IS-V3 (build-vector 10 (λ (i) i)))
(define IS-V4 (build-vector 10 (λ (i) (sub1 (- 10 i)))))

;; IN-PLACE QUICK SORTING ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (vectorof number) -> (void)
;; Purpose: Sort the given vector in nondecreasing order
;; Effect: Vector elements are rearranged in place in
;;         nondecreasing order
(define (qs-in-place! V)
  (local [;; natnum natnum -> (void)
          ;; Purpose: Swap the elements at the given indices
          ;; Effect: V is mutated by swapping elements at given indices
          (define (swap! i j)
            (local [(define temp (vector-ref V i))]
              (begin
                (vector-set! V i (vector-ref V j))
                (vector-set! V j temp))))

          ;; number [int int] -> natnum
          ;; Purpose: Find the largest index, i, such that
          ;;          V[i] ≤ to the given pivot
          ;; Assumption: V[low] = pivot
          (define (find<= pivot low high)
            (if (or (> low high)
                    (<= (vector-ref V high) pivot))
                high
                (find<= pivot low (sub1 high))))

          ;; number [int int] -> natnum
          ;; Purpose: If it exists, find smallest index ≥ low,
          ;;          i, such that V[i] > given pivot if it exists.
          ;;          Otherwise, return a value greater than high.
          (define (find> pivot low high)
            (if (or (> low high)
                    (> (vector-ref V low) pivot))
                low
                (find> pivot (add1 low) high)))

          ;; number [int int] -> natnum
          ;; Purpose: Return the position of the pivot in the
          ;;          sorted V
          ;; How: The smallest index of a vector element > pivot
          ;;      and the largest index of an element <= to the
          ;;      pivot are found. If they form an empty vector
          ;;      interval the largest index of an element <= to
          ;;      the pivot is returned. Otherwise, the two
          ;;      indexed values are swapped and the partitioning
          ;;      process continues with the vector interval
          ;;      formed by the two indices.
          ;; Effect: V’s elements are rearranged so that all
          ;;         elements <= to the pivot are at the beginning
          ;;         of the vector interval and all elements > the
          ;;         pivot are at the end of the vector interval.
          (define (partition! pivot low high)
            (local [(define first>pivot (find> pivot low high))
                    (define first<=pivot (find<= pivot low high))]
              (if (> first>pivot first<=pivot)
                  first<=pivot
                  (begin
                    (swap! first>pivot first<=pivot)
                    (partition! pivot
                                first>pivot
                                first<=pivot)))))
          ;; Termination Argument:
          ;; Every recursive call is made with a smaller vector
          ;; interval that does not contain the beginning numbers
          ;; <= to the pivot and the ending numbers > pivot.
          ;; Eventually, the recursive call is made with an empty
          ;; vector interval and the function halts.
          
          ;; [int int] -> (void)
          ;; Purpose: Sort V’s elements in the given vector interval
          ;;          in nondecreasing order
          ;; How: The vector is partitioned in two. The first element
          ;;      is placed in the vector position between the
          ;;      elements ≤ to it and the elements > than it. The
          ;;      The vector intervals for the two parts of the
          ;;      partition are recursively sorted
          ;; Effect: Vector elements in the given vector interval are
          ;;         rearranged in nondecreasing order.
          (define (qs-aux! low high)
            (if (> low high)
                (void)
                (local [(define pivot (vector-ref V low))
                        (define pivot-pos (partition! pivot low high))]
                  (begin
                    (swap! low pivot-pos)
                    (qs-aux! low (sub1 pivot-pos))
                    (qs-aux! (add1 pivot-pos) high)))))
          ;; Termination Argument:
          ;; A given nonempty vector interval is divided into two
          ;; smaller vector intervals and these are recursively
          ;; processed. Eventually, the given vector interval
          ;; becomes empty and the function halts.
          ]
    (qs-aux! 0 (sub1 (vector-length V)))))

;; tests for qs-in-place!
(check-expect (begin
                (qs-in-place! QS-V0)
                QS-V0)
              (vector))
(check-expect (begin
                (qs-in-place! QS-V1)
                QS-V1)
              (vector 3 7 10 11 17))
(check-expect (begin
                (qs-in-place! QS-V2)
                QS-V2)
              (vector 12 20 22 22 23 27 31 37 44 46
                      60 60 62 67 74 75 77 80 85 86))
(check-expect (begin
                (qs-in-place! QS-V3)
                QS-V3)
              (vector 0 1 2 3 4 5 6 7 8 9))
(check-expect (begin
                (qs-in-place! QS-V4)
                QS-V4)
              (vector 0 1 2 3 4 5 6 7 8 9))

;; IN-PLACE HEAP SORTING ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (vectorof number) → (void)
;; Purpose: Sort the given vector in nondecreasing order
;; Effect: The given vector’s elements are rearranged in
;; nondecreasing order
(define (heap-sort-in-place! V)
  (local [;; natnum natnum → (void)
          ;; Purpose: Swap the elements at the given indices
          ;; Effect: V is mutated by swapping elements at
          ;;           given indices
          (define (swap! i j)
            (local [(define temp (vector-ref V i))]
              (begin
                (vector-set! V i (vector-ref V j))
                (vector-set! V j temp))))
          
          ;; natnum → natnum
          ;; Purpose: Return the index for the right
          ;;          subheap’s root
          (define (right-heap-root parent-index)
            (+ (* 2 parent-index) 2))
          
          ;; natnum -> natnum
          ;; Purpose: Return the index for the left
          ;;          subhead’s root
          (define (left-heap-root parent-index)
            (add1 (* 2 parent-index)))
          
          ;; natnum -> natnum
          ;; Purpose: Return the parent index in the heap
          ;; Assumption: the given index is in
          ;;             [1..(sub1 (vector-length V))]
          (define (parent i)
            (if (even? i)
                (quotient (sub1 i) 2)
                (quotient i 2)))
          
          ;; [int int] -> (void)
          ;; Purpose: For the given VINTV, sort the vector elements
          ;; Effect: V’s elements in the given VINTV are rearranged
          ;;         in nondecreasing order
          ;; Assumption: V[low..high] is a heap
          (define (sorter! low high)
            (cond [(> low high) (void)]
                  [else (begin
                          (swap! low high)
                          (trickle-down! low (sub1 high))
                          (sorter! low (sub1 high)))]))
          
          ;; [int int] -> (void)
          ;; Purpose: For the given VINTV, reestablish a heap
          ;;          rooted at low
          ;; Effect: Vector elements are rearranged to have
          ;;         a heap rooted at low
          ;; Assumption: V[low+1..high] are all heap roots
          (define (trickle-down! low high)
            (local
              [(define rc-index (right-heap-root low))
               (define lc-index (left-heap-root low))]
              (cond [(> lc-index high) (void)];; root has no children
                    [(> rc-index high) ;; root only has a left child
                     (if (<= (vector-ref V lc-index)
                             (vector-ref V low))
                         (void)
                         (begin
                           (swap! low lc-index)
                           (trickle-down! lc-index high)))]
                    [else ;; root has two children
                     (local
                       [(define mc-index (if (>= (vector-ref V lc-index)
                                                 (vector-ref V rc-index))
                                             lc-index
                                             rc-index))]
                       (cond [(>= (vector-ref V low)
                                  (vector-ref V mc-index))
                              (void)]
                             [else (begin
                                     (swap! low mc-index)
                                     (trickle-down! mc-index high))]))])))
          ;; Termination Argument:
          ;; A recursive call is only made when V[low} has one or two children.
          ;; That is, the index of any child must be less than or equal to high.
          ;; Every recursive call is made with an interval formed by a child
          ;; index and high. Eventually, the given vector interval becomes empty
          ;; or V[low] is a heap root and the mutator terminates.

          ;; [int int] -> (void)
          ;; Purpose: Transform the elements in the given VINTV
          ;;          into a heap
          ;; Effect: Rearrange the vector elements to form a heap
          ;;         rooted at low
          ;; Assumptions:
          ;;   low > 0 Given VINTV is valid for V
          ;;
          ;;   Given VINTV is valid for V
          ;;
          ;;   Elements indexed in [high+1..(sub1 (vector-length V))]
          ;;   are heap roots
          (define (heapify! low high)
            (cond [(> low high) (void)]
                  [else
                   (local [(define parent-index (parent high))]
                     (cond [(>= (vector-ref V parent-index)
                                (vector-ref V high))
                            (heapify! low (sub1 high))]
                           [else
                            (begin
                              (swap! parent-index high)
                              (trickle-down! high
                                             (sub1 (vector-length V)))
                              (heapify! low (sub1 high)))]))]))
          ]
    (begin
      (heapify! 1 (sub1 (vector-length V)))
      (sorter! 0 (sub1 (vector-length V))))))
          
;; tests for heap-sort-in-place!
(check-expect (begin
                (heap-sort-in-place! HS-V0)
                HS-V0)
              (vector))
(check-expect (begin
                (heap-sort-in-place! HS-V1)
                HS-V1)
              (vector 4 7 9 19 28))             
(check-expect (begin
                (heap-sort-in-place! HS-V2)
                HS-V2)
              (vector 2 3 4 5 6 7 7 8 10 10 17
                      19 19 19 27 28 29 38 46 48))
(check-expect (begin
                (heap-sort-in-place! HS-V3)
                HS-V3)
              (vector 0 1 2 3 4 5 6 7 8 9))
(check-expect (begin
                (heap-sort-in-place! HS-V4)
                HS-V4)
              (vector 0 1 2 3 4 5 6 7 8 9))

;; IN-PLACE INSERTION SORTING ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Sample vectors
(define VEC (vector -1000 -100 -10 0 1 10 100))
(define VEC1 (vector 1 2))
(define VEC2 (vector 2 84 -2 43 235 9382 -1 -52))
(define VEC3 (vector 291 94 -284 -29 1 -4 -28))

(define (insertion-sort-in-place! vec)
  (local [;; natnum natnum → (void)
          ;; Purpose: Swap the elements at the given indices
          ;; Effect: vec is mutated by swapping elements at given indices
          (define (swap! i j)
            (local [(define temp (vector-ref vec i))]
              (begin
                (vector-set! vec i (vector-ref vec j))
                (vector-set! vec j temp))))
          ;;
          ;;
          (define (insertion i)
            (if (<= i 0)
                (void)
                (if (< (vector-ref vec i) (vector-ref vec (- i 1)))
                    (begin
                      (swap! i (- i 1))
                      (insertion (- i 1)))
                    (void))))
          ;; 
          ;;
          (define (ishelper low high)
            (if (> low high)
                vec
                (begin
                  (insertion low)
                  (ishelper (+ low 1) high))))]
    (ishelper 1 (- (vector-length vec) 1))))

;; IN-PLACE RADIX SORTING ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;Data Definitions:
;; - A Message is a symbol that is one of the following:
;;    - 'add -> to add a given integer
;;    - 'dump -> to dump bucket elements into given vector
;;    - 'size -> to see the number of elements in the bucket
;;    - 'elems -> to see the vector bucket elements

;;Constants:
(define BIGTEST (vector 0 -1 -100 -5 20 75 98 1))
(define BIGTEST2 (vector 12 43 64 12 65 87 34 54 65 12))
(define test2 (vector 1 2 3 4 5 6 7 8 9 10))

         
;; (vectorof number) -> (void)
;; Purpose: Sort the given vector in nondecreasing order
;; Effect: Vector elements are rearranged in place in
;;         nondecreasing order
;; Assumption: Given Vector is a vector of numbers
(define (radix-sort-in-place! vec)
  (local [;;Purpose: Starting point modular arithmetic
          (define MNUM 1)
          
          ;;Purpose: This is the starting point/end point of radix sort.
          ;;         Depending on the length of the largest number it will continue until LNUM
          ;;         is back to zero
          (define LNUM 0)
          
          ;;Purpose: This is the starting point for the smallest number in the vector of numbers.
          ;;         If there is a number smaller than this it will replace the min which will eventually
          ;;         be added mapped to the rest of the vector.
          (define MIN 0)

          ;; number --> bucket
          ;; Purpose: To construct a bucket
          (define (make-bucket n)
            (local [;; number -> vector
                    ;;Purpose: Creates a vector of voids based on the given number
                    (define bucket (make-vector n (void)))


                    ;;Index Constant
                    ;;Purpose: Keeps track of where in the bucket there is a number by giving
                    ;;         how many elements are in the total bucket
                    (define i 0)
                   
            
                    ;; num -> (void)
                    ;;Purpose: sets the given index of the bucket to the given number        
                    (define (add! num)
                      (begin
                        ;; Effect: sets the bucket at the current i to the given num
                        (vector-set! bucket i num)
                        ;; Effect: 1 is added to i to show that the index of the bucket has become greater by 1
                        (set! i (add1 i))))                                                                 

                    ;; vector -> void
                    ;;Purpose: Dumps the vector (bucket) into another given vector and then empties the bucket
                    ;;Assumption: The given vector is greater than or the same length as the bucket
                    (define (dump! vec num)
                      (local [;; number number vector -> (void)
                              ;; Purpose: Transverses a list and simultaneously transfers one number at a time
                              ;;          from the bucket to a given vector and then empties at its current index
                              (define (dump-helper num vec clow chigh)                                  
                                (if (> clow chigh)
                                    (begin
                                      ;; Effect: Sets the index of the main bucket back to 0 so that it can recur
                                      ;;          from the beginning of the bucket on the next run
                                      (set! i 0)
                                      vec)
                                    (if (> num chigh)
                                        (begin
                                          ;; Effect: sets the index of the bucket back to 0 so that it can recur
                                          (set! i 0)
                                          vec)
                                        (begin
                                          ;; Effect: Sets the given vector at the current num to the number at the
                                          ;;          counter's current low 
                                          (vector-set! vec num (vector-ref bucket clow))
                                          ;; Effect: After the number in the bucket at the current low is set in the given vec
                                          ;;          it is set to void in the bucket
                                          (vector-set! bucket clow (void))
                                          (dump-helper (add1 num) vec (add1 clow) chigh)))))]
                        (dump-helper num vec 0 (sub1 (vector-length bucket)))))
            

                    ;; message -> bo (bucket-object)
                    ;;Purpose: Manage bucket-object services
                    (define (bucket-object a-message)
                      (cond [(eq? a-message 'elems) bucket]
                            [(eq? a-message 'size) i]
                            [(eq? a-message 'add) add!]
                            [(eq? a-message 'dump) dump!]
                            [else (error "Invalid Message")]))]
              bucket-object))
          
          ;; bo -> vector
          ;; Purpose: returns a vector of the bucket elements  
          (define (get-elems b)
            (b 'elems))

          ;; bo -> number 
          ;; Purpose: returns the size of the bucket inside the bucket object
          (define (get-size b)
            (b 'size))

          ;; bo num -> (void)
          ;; Purpose: Adds the given number to the bucket inside the given bucket object
          (define (add-2-bucket b num)
            ((b 'add) num))

          ;; bo vector -> (void)
          ;; Purpose: Dumps the bucket of the given bucket object into the given vector 
          (define (dump-bucket b vec num)
            ((b 'dump) vec num))

          ;; Purpose: This is the main bucket 10 individual buckets
          ;;          made with the vector-length of the given vector. x in the lambda is a dummy
          ;;          variable.
          (define MAIN-BUCKET
            (build-vector 10 (λ (x) (make-bucket (vector-length vec)))))


          ;; vector -> (void)
          ;;Purpose find the how many digits is in the longest number of a vector of numbers 
          (define (find-long-num vec)
            (local [;; vector number number -> (void)
                    ;; Purpose: Adds 1 to LNUM for each digit in the longest number
                    (define (flnhelper vec low high)
                      (local [;; number -> number
                              ;; Purpose: Recursively divides a dumber by 10 until it is 0 each time adding 1 to the answer
                              ;;          then returns how many times it was able to be divided by zero.
                              (define (count num)
                                (if (= num 0)
                                    0
                                    (+ 1 (count (quotient num 10)))))]
                        (if (> low high)
                            (void)
                            (local [(define cnum (count (vector-ref vec low)))]
                              ;; Accum Invariant: cnum is the count of the number at the vec current low pos
                              ;;                  each recursion the cnum changes to be the new count of the new low pos
                              ;;                  It will then compare the current cnum to the LNUM and if the cnum is larger
                              ;;                  It will change the LNUM to the current cnum
                              (if (> cnum LNUM)
                                  (begin
                                    ;; Effect: sets the LNUM to the current num which would be larger
                                    ;;         than the current LNUM
                                    (set! LNUM cnum)
                                    (flnhelper vec (add1 low) high))
                                  (flnhelper vec (add1 low) high))))))]                               
              (flnhelper vec 0 (sub1 (vector-length vec)))))
        
          ;; function vector -> vector
          ;; Purpose: Applies a funtion to each element in the vector
          (define (vector-map f vec)
            (local [;; number number function vector -> vector 
                    ;; Purpose: Applies a function to an element and then recurs so that it can be applied to the next
                    (define (vmhelper low high f vec)
                      (if (> low high)
                          vec
                          (begin
                            ;; Effect: Recursively goes through the vector and sets the vector that has been
                            ;;         affected by the function to the given vector at the current low
                            (vector-set! vec low (f (vector-ref vec low)))
                            (vmhelper (add1 low) high f vec))))]
              (vmhelper 0 (sub1 (vector-length vec)) f vec)))

          ;; vector -> (void)
          ;; Purpose: Find the smallest number in the given vector. If no number is smaller than zero it returns 0
          (define (find-min vec)
            (local [;; number number vector -> (void)
                    ;;Purpose: Goes through a vector recursively and compares each number to the min
                    (define (fmhelper low high vec)
                      (if (> low high)
                          (void)
                          (if (< (vector-ref vec low) MIN)
                              (begin
                                ;; Effect: sets the min to the current vector low if the current low is
                                ;;         less than the current min
                                (set! MIN (vector-ref vec low))
                                (fmhelper (add1 low) high vec))
                              (fmhelper (add1 low) high vec))))]
              (fmhelper 0 (sub1 (vector-length vec)) vec)))


          ;; vector -> vector
          ;; Purpose: Adds the minimum number to each element of a vector  
          (define (add-min vec)
            (begin
              (find-min vec)
              (if (not (= MIN 0))
                  (vector-map (λ (x) (+ x (abs MIN))) vec)
                  vec)
              vec))



          ;; vector number -> (void)
          ;; Purpose: using the provided index from the function (find-largest-num) takes invidual digits from each
          ;;          element of the given vector depending on what stage of recursion 
          (define (bucketize vec)
            (local [;; number number vector
                    ;; Purpose: Using modular arithmetic finds the bucket of the value same value and adds all digits of that
                    ;;          value to that bucket.
                    (define (bhelper low high vec)
                      (if (> low high)
                          (begin
                            ;; Effect: each time the behlper finishes adding all of the same digit place
                            ;;         to the given bucket it will multiply MNUM by 10 to signal a change
                            ;;         in the modular arithmetic 
                            (set! MNUM (* MNUM 10)))
                          (begin
                            (add-2-bucket (vector-ref MAIN-BUCKET (modulo (floor (/ (vector-ref vec low) MNUM)) 10)) (vector-ref vec low))
                            (bhelper (add1 low) high vec))))]
              (bhelper 0 (sub1 (vector-length vec)) vec)))

          ;; von (vector of numbers) number -> vector
          ;;Purpose: Recursively goes through the main bucket and adds each bucket into the original vector
          (define (debucketize vec cnum)
            (local [;; number number vector number
                    ;; Purpose: Goes through and sends dump bucket the number at the current low and
                    ;;          sends the given number of where there currently is not a number in the given vector
                    ;;          so that dump can start dumping the bucket there.
                    (define (dhelper low high vec cn)
                      ;; Accum Invariant: cn is the value of the current size of the bucket at the current low
                      ;;                  added to itself. It starts at zero and finishes once low is greater than high.
                      ;;                  Once it finishes that symbolizes that all the buckets in the main bucket
                      ;;                  have been completely emptied into the given vector
                      (if (> low high)
                          vec
                          (local [(define update-cn (+ cn (get-size (vector-ref MAIN-BUCKET low))))]
                            (begin
                              (dump-bucket
                               (vector-ref MAIN-BUCKET low) vec cn)
                              (dhelper (add1 low) high vec update-cn)))))]
              (dhelper cnum (sub1 (vector-length MAIN-BUCKET)) vec 0)))

          ;; vector -> vector
          ;; Purpose: Subtracts the MIN from the vector used to return original vector values and then sets MIN to 0
          (define (sub-min vec)
            (begin
              (vector-map (λ (x) (+ x MIN)) vec)
              ;;Effect: Sets the MIN back to zero so that when another vector is given it can check and compare
              ;;        the smallest number in the new vector easier
              (set! MIN 0)
              vec))]   
    (begin
      (find-long-num vec)
      (find-min vec)
      (add-min vec)
      (local [(define (rshelper num)
                (if (= LNUM num)
                    (void)
                       (begin
                         (bucketize vec)
                         (debucketize vec 0)
                         (rshelper (add1 num)))))]
               (rshelper 0))
      (sub-min vec)
      ;;Effect: Sets MNUM back to 1 so that when another vector is given modular arithmetic will
      ;;        start from the beginning
      (set! MNUM 1))))

#|
Termination Argument: Radix Sort will stop sorting the given vector when the mutated variable of
                      LNUM is less than 1. At that point it will subtract the MIN from the current vector.
                      This will return the vector to its original values. After it subtracts the min,
                      It will then set the MNUM back to 1 so that it can take in another vector.
                      After setting MNUM back to 1 it will return the given vector.
|#

;; EMPIRICAL PROJECT ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; natnum (listof ((vectorof number) → (void))) → (void)
;; Purpose: Run empirical study with vectors that have lengths
;;          that are multiples of 1000 in [1000..natnum*1000]
(define (empirical-study factor lst-of-sorters)
  (local
    [(define NUM-RUNS 5)
     (define V (build-vector (* factor 1000) (λ (i) (random 10000000))))
     ;; (vectorof number) natnum (listof ((vectorof number) → (void)))
     ;; → (void)
     ;; Purpose: Time the given in-place sorters using the given vector
     ;;          the given number of times
     (define (run-experiments V runs sorters)
       (local [;; (listof ((vectorof number)→(void)))→(void)
               ;; Purpose: Run n experiments
               (define (run sorters)
                 (if (empty? sorters)
                     (void)
                     (local [;; (vectorof number)
                             ;; Purpose: Copy of V to sort
                             (define V1 (build-vector
                                         (vector-length V)
                                         (λ (i) (vector-ref V i))))]
                       (begin
                         (display (format "Sorter ~s: "
                                          (add1 (- (length lst-of-sorters)
                                                   (length sorters)))))
                         (time ((first sorters) V1))
                         (run (rest sorters))))))]
         (if (= runs 0)
             (void)
             (begin
               (display (format " RUN ~s\n" (add1 (- NUM-RUNS runs))))
               (run sorters)
               (run-experiments V (sub1 runs) sorters)))))]
    (if (= factor 0)
        (void)
        (begin
          (display (format "Experiments for length ~s \n" (* factor 1000)))
          (run-experiments V NUM-RUNS lst-of-sorters)
          (newline)
          (newline)
          (empirical-study (sub1 factor) lst-of-sorters)))))

#|
(empirical-study 20
(list qs-in-place!
heap-sort-in-place!
 insertion-sort-in-place!
radix-sort-in-place!))
|#